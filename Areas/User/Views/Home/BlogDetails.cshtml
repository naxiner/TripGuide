@using Microsoft.AspNetCore.Identity
@model TripGuide.Models.ViewModels.BlogDetailsViewModel

@inject UserManager<User> UserManager

@if (Model != null)
{
    <div class="container my-5">
        <div class="row justify-content-center">
            <div class="col-12 col-lg-6">

                @{
                    ViewData["Title"] = Model.BlogPost.PageTitle;
                }

                <h1 class="mb-3">@Model.BlogPost.PageTitle</h1>

                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.BlogPost.PublishedDate.ToShortDateString()</span>
                </div>

                <div class="row">
                    <div class="mb-3 col">
                        @if (Model.BlogPost.Tags != null)
                        {
                            foreach (var tag in Model.BlogPost.Tags)
                            {
                                <a href="/tags/@tag.Name">
                                    <span class="badge bg-dark">@tag.Name</span>
                                </a>
                            }
                        }
                    </div>
                    <div class="mb-3 col">
                        <div class="text-end">
                            <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#saveToProfileModal-@Model.BlogPost.Id">
                                Save to Profile
                            </button>
                        </div>

                        <div class="modal fade" id="saveToProfileModal-@Model.BlogPost.Id" tabindex="-1" aria-labelledby="saveToProfileModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="saveToProfileModalLabel">Save to Profile</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <form method="post" asp-action="SaveToProfile" asp-controller="Profile">
                                            <input type="hidden" name="BlogId" value="@Model.BlogPost.Id" />
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" name="collection" value="want-to-visit" id="wantToVisit-@Model.BlogPost.Id">
                                                <label class="form-check-label" for="wantToVisit-@Model.BlogPost.Id">
                                                    Want to Visit
                                                </label>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" name="collection" value="visited" id="visited-@Model.BlogPost.Id">
                                                <label class="form-check-label" for="visited-@Model.BlogPost.Id">
                                                    Visited
                                                </label>
                                            </div>

                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-primary">Save</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <img src="@Model.BlogPost.FeaturedImageUrl" alt="@@Model.BlogPost.PageTitle" class="mb-2 d-block img-fluid" />

                <div class="mb-3 blog-details">
                    @Html.Raw(Model.BlogPost.Content)
                </div>

                @if (Model.TouristObject != null)
                {
                    <div class="mt-4 mb-3 p-3 bg-light rounded">
                        <h4 class="mb-3">About the Tourist Object</h4>
                        <p><strong>Name:</strong> @Model.TouristObject.Name</p>
                        <p><strong>Address:</strong> @Model.TouristObject.Address</p>
                        <p><strong>Coordinates:</strong> Latitude: @Model.TouristObject.Latitude, Longitude: @Model.TouristObject.Longitude</p>
                        <p><strong>Opening Hours:</strong> @Model.TouristObject.OpeningTime.ToString(@"hh\:mm") - @Model.TouristObject.ClosingTime.ToString(@"hh\:mm")</p>
                    </div>

                    <div>
                        <div id="map" style="height: 360px; width: 620px;"></div>
                        <script>
                            let map, marker;
                            const latitude = @Model.BlogPost.TouristObject.Latitude.ToString().Replace(",", ".");
                            const longitude = @Model.BlogPost.TouristObject.Longitude.ToString().Replace(",", ".");

                            async function initMap() {
                                const { Map } = await google.maps.importLibrary("maps");
                                const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");


                                map = new Map(document.getElementById("map"), {
                                    center: { lat: latitude, lng: longitude },
                                    zoom: 14,
                                    mapId: "4504f8b37365c3d0",
                                });

                                marker = new AdvancedMarkerElement({
                                    map,
                                    position: {
                                        lat: latitude,
                                        lng: longitude
                                    }
                                });

                                document.getElementById("latitude").addEventListener("input", updateMarkerPosition);
                                document.getElementById("longitude").addEventListener("input", updateMarkerPosition);
                            }

                            initMap();
                        </script>
                        <script src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.GoogleMapsApiKey&callback=initMap" async defer></script>
                    </div>
                }

                @if (Model != null && Model.TripRoute != null)
                {
                    <div class="mt-4 mb-3 p-3 bg-light rounded">
                        <h4 class="mb-3">About the Trip Route</h4>
                        <p><strong>Name:</strong> @Model.TripRoute.Name</p>

                        <h5>Tourist Objects in this Route:</h5>
                        <ul>
                            @foreach (var tripRouteObject in Model.TripRoute.TripRouteTouristObjects)
                            {
                                <li>
                                    <strong>@tripRouteObject.TouristObject.Name</strong><br />
                                    Address: @tripRouteObject.TouristObject.Address <br />
                                    Coordinates: Latitude: @tripRouteObject.TouristObject.Latitude, Longitude: @tripRouteObject.TouristObject.Longitude
                                </li>
                            }
                        </ul>
                    </div>
                    <div>
                        <div id="routeMap" style="height: 400px; width: 100%;"></div>
                    </div>
                }

                <h3 class="my-4">Reviews</h3>

                @foreach (var review in Model.Reviews)
                {
                    <div class="mb-3 p-3 bg-light rounded">
                        <div class="row mb-3">
                            <div class="col text-start text-secondary">
                                <small>@review.UserName</small>
                            </div>
                            <div class="col text-end text-warning">
                                <span>
                                    @for (int i = 0; i < 5; i++)
                                    {
                                        if (i < review.Rating)
                                        {
                                            <i class="bi bi-star-fill"></i>
                                        }
                                        else
                                        {
                                            <i class="bi bi-star"></i>
                                        }
                                    }
                                </span>
                            </div>
                        </div>

                        <div class="mb-3 d-flex justify-content-between">
                            <strong class="review-content">@review.Content</strong>
                        </div>

                        @if (review.FeaturedImageUrl != null)
                        {
                            <div class="mb-3 text-center">
                                <img src="@review.FeaturedImageUrl" id="featuredImageDisplay" style="width:300px" />
                            </div>
                        }

                        <div class="row mb-3">
                            <div class="col text-start text-secondary">
                                <small>Added on @review.DateAdded.ToShortDateString()</small>
                            </div>
                            <div class="col text-end">
                                @if (User.Identity.Name == review.UserName)
                                {
                                    <button type="button" class="btn btn-link" data-bs-toggle="modal" data-bs-target="#editReviewModal-@review.Id">Edit</button>
                                }
                                @if (User.Identity.Name == review.UserName || User.IsInRole("Admin") || User.IsInRole("Moderator"))
                                {
                                    <form method="post" asp-action="DeleteReview" asp-route-urlHandle="@Model.BlogPost.UrlHandle" class="d-inline-block">
                                        <input type="hidden" name="reviewId" value="@review.Id" />
                                        <button type="submit" class="btn btn-link text-danger" onclick="return confirm('Are you sure you want to delete this item?');">Delete</button>
                                    </form>
                                }
                            </div>
                        </div>

                        <form method="post" asp-action="EditReview" asp-route-urlHandle="@Model.BlogPost.UrlHandle">
                            <div class="modal fade" id="editReviewModal-@review.Id" tabindex="-1" aria-labelledby="editReviewLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="editReviewLabel">Edit Review</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <input type="hidden" name="Id" value="@review.Id" />
                                            <div class="mb-3">
                                                <label class="form-label">Rating</label>
                                                <div>
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        <a style="cursor: pointer">
                                                            <i class="bi @((i <= review.Rating) ? "bi-star-fill text-warning" : "bi-star")" data-value="@i" onclick="setRating(@i, '@review.Id')"></i>
                                                        </a>
                                                    }
                                                    <input type="hidden" id="ratingInput-@review.Id" name="Rating" value="@review.Rating" />
                                                </div>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Review</label>
                                                <textarea class="form-control" name="Content" rows="4" required>@review.Content</textarea>
                                            </div>
                                            @if (User.Identity.IsAuthenticated)
                                            {
                                                var user = await UserManager.GetUserAsync(User);
                                                if (user.AccountVerified)
                                                {
                                                    <div id="review-@review.Id" class="review-container">
                                                        <div class="mb-3">
                                                            <label class="form-label">Featured Image Upload</label>
                                                            <input type="file" id="featuredImageUpload-edit-@review.Id" name="FeaturedImage">
                                                            <img src="@review.FeaturedImageUrl" id="featuredImageDisplay-edit-@review.Id" style="width:300px" />
                                                        </div>
                                                        <input type="text" hidden value="@review.FeaturedImageUrl" name="FeaturedImageUrl" class="form-control" id="featuredImageUrl-edit-@review.Id">
                                                    </div>
                                                }
                                            }
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                            <button type="submit" class="btn btn-dark">Save changes</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                }

                @if (Model.CanAddReview)
                {
                    <div class="mb-3 d-flex justify-content-end">
                        <button type="button" class="btn btn-dark"
                                data-bs-toggle="modal" data-bs-target="#addReviewModal">
                            Add Review
                        </button>
                    </div>
                }

            </div>
        </div>
    </div>

    <form method="post" asp-action="AddReview" asp-route-urlHandle="@Model.BlogPost.UrlHandle">
        <div class="modal fade" id="addReviewModal" tabindex="-1" aria-labelledby="addReviewLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addReviewLabel">Add Review</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Rating</label>
                            <div>
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <a style="cursor: pointer">
                                        <i class="bi bi-star" data-value="@i" onclick="setRating(@i)"></i>
                                    </a>
                                }
                                <input type="hidden" id="ratingInput" name="Rating" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Review</label>
                            <textarea class="form-control" name="Content" rows="4" required></textarea>
                        </div>
                        @if (User.Identity.IsAuthenticated)
                        {
                            var user = await UserManager.GetUserAsync(User);
                            if (user.AccountVerified)
                            {
                                <div>
                                    <div class="mb-3">
                                        <label class="form-label">Featured Image Upload</label>
                                        <input type="file" id="featuredImageUpload-add" name="FeaturedImage">
                                        <img src="" id="featuredImageDisplay-add" style="width:300px" />
                                    </div>
                                    <input type="text" hidden name="FeaturedImageUrl" class="form-control" id="featuredImageUrl-add">
                                </div>
                            }
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-dark">Save changes</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
}
else
{
    <div class="container mt-3">
        <h2>Blog post not found!</h2>
    </div>
}

@section Scripts {
    <script>
        function setRating(value, reviewId = null) {
            let currentRatingInput = document.getElementById('ratingInput');

            if (reviewId) {
                currentRatingInput = document.getElementById('ratingInput-' + reviewId);
            }

            const currentValue = parseInt(currentRatingInput.value);

            if (currentValue === value) {
                resetRating(reviewId);
                return;
            }

            const addReviewStars = document.querySelectorAll(
                reviewId
                    ? `#editReviewModal-${reviewId} .bi-star, #editReviewModal-${reviewId} .bi-star-fill`
                    : '#addReviewModal .bi-star, #addReviewModal .bi-star-fill'
            );

            addReviewStars.forEach((star, index) => {
                if (index < value) {
                    star.classList.remove('bi-star');
                    star.classList.add('bi-star-fill', 'text-warning');
                } else {
                    star.classList.remove('bi-star-fill', 'text-warning');
                    star.classList.add('bi-star');
                }
            });

            currentRatingInput.value = value;
        }

        function resetRating(reviewId = null) {
            const stars = document.querySelectorAll(
                reviewId
                    ? `#editReviewModal-${reviewId} .bi-star-fill`
                    : '#addReviewModal .bi-star-fill'
            );

            stars.forEach(star => {
                star.classList.remove('bi-star-fill', 'text-warning');
                star.classList.add('bi-star');
            });

            if (reviewId) {
                document.getElementById('ratingInput-' + reviewId).value = "";
            } else {
                document.getElementById('ratingInput').value = "";
            }
        }

        document.getElementById('addReviewModal').addEventListener('show.bs.modal', function () {
            resetRating();
        });

        function getFeaturedImageElements(reviewId) {
            return {
                uploadElement: document.getElementById(`featuredImageUpload-edit-${reviewId}`),
                urlElement: document.getElementById(`featuredImageUrl-edit-${reviewId}`),
                displayElement: document.getElementById(`featuredImageDisplay-edit-${reviewId}`)
            };
        }

        const featuredImageUploadElement_add = document.getElementById('featuredImageUpload-add');
        const featuredImageUrl_add = document.getElementById('featuredImageUrl-add');
        const featuredImageDisplay_add = document.getElementById('featuredImageDisplay-add');

        async function uploadFeaturedImage_add(e) {
            console.log(e.target.files[0]);

            let data = new FormData();
            data.append('file', e.target.files[0]);

            await fetch('/api/image', {
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    featuredImageUrl_add.value = result.link;
                    featuredImageDisplay_add.style.display = 'block';
                    featuredImageDisplay_add.src = result.link;
                });
        }

        async function uploadFeaturedImage_edit(event, reviewId) {
            console.log(event.target.files[0]);
            const elements = getFeaturedImageElements(reviewId);

            let data = new FormData();
            data.append('file', event.target.files[0]);

            await fetch('/api/image', {
                method: 'POST',
                headers: {
                    'Accept': '*/*',
                },
                body: data
            }).then(response => response.json())
                .then(result => {
                    elements.urlElement.value = result.link;
                    elements.displayElement.style.display = 'block';
                    elements.displayElement.src = result.link;
                });
        }

        featuredImageUploadElement_add.addEventListener('change', uploadFeaturedImage_add);
        document.querySelectorAll('[id^="featuredImageUpload-edit-"]').forEach(element => {
            const reviewId = element.id.replace('featuredImageUpload-edit-', '');
            element.addEventListener('change', (e) => uploadFeaturedImage_edit(e, reviewId));
        });

        let routeMap, directionsRenderer;
        const waypoints = @Html.Raw(Json.Serialize(Model.TripRoute.TripRouteTouristObjects.Select(rto => new
            {
                lat = rto.TouristObject.Latitude,
                lng = rto.TouristObject.Longitude
            })));

        function initRouteMap() {
            routeMap = new google.maps.Map(document.getElementById("routeMap"), {
                center: { lat: waypoints[0].lat, lng: waypoints[0].lng },
                zoom: 10,
                mapId: "4504f8b37365c3d0",
            });

            directionsRenderer = new google.maps.DirectionsRenderer({
                map: routeMap,
                suppressMarkers: true
            });

            updateRouteMap();
        }

        function updateRouteMap() {
            if (directionsRenderer) {
                directionsRenderer.setMap(null);
            }

            if (window.markers) {
                window.markers.forEach(marker => marker.setMap(null));
            }

            window.markers = [];

            if (waypoints.length < 2) return;

            const directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                map: routeMap,
                suppressMarkers: true
            });

            const origin = waypoints[0];
            const destination = waypoints[waypoints.length - 1];
            const waypointsForRequest = waypoints.slice(1, -1).map(wp => ({
                location: new google.maps.LatLng(wp.lat, wp.lng),
                stopover: true
            }));

            const request = {
                origin: new google.maps.LatLng(origin.lat, origin.lng),
                destination: new google.maps.LatLng(destination.lat, destination.lng),
                waypoints: waypointsForRequest,
                optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.WALKING
            };

            directionsService.route(request, function (result, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsRenderer.setDirections(result);

                    const route = result.routes[0];
                    route.waypoint_order.forEach((waypointIndex, i) => {
                        const waypoint = waypoints[waypointIndex + 1];
                        const marker = new google.maps.Marker({
                            position: { lat: waypoint.lat, lng: waypoint.lng },
                            map: routeMap,
                            label: (i + 2).toString(),
                            title: `Point ${i + 2}`
                        });
                        window.markers.push(marker);
                    });

                    const startMarker = new google.maps.Marker({
                        position: { lat: origin.lat, lng: origin.lng },
                        map: routeMap,
                        label: '1',
                        title: 'Start Point'
                    });
                    window.markers.push(startMarker);

                    const endMarker = new google.maps.Marker({
                        position: { lat: destination.lat, lng: destination.lng },
                        map: routeMap,
                        label: waypoints.length.toString(),
                        title: 'End Point'
                    });
                    window.markers.push(endMarker);
                }
            });
        }

        (function loadGoogleMapsAPI() {
            const script = document.createElement('script');
            script.src = 'https://maps.googleapis.com/maps/api/js?key=@ViewBag.GoogleMapsApiKey&callback=initRouteMap';
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
        })();
    </script>
}