@model BlogPost

<div class="bg-secondary bg-opacity-10 py-2 mb-5">
    <div class="container">
        <h1>Update Blog Post about Tourist Object</h1>
    </div>
</div>

<div>
    <div class="container">
        <form asp-action="Update" method="post" enctype="multipart/form-data">
            <input asp-for="Id" type="hidden" />

            <div class="mb-3">
                <label for="pageTitle" class="form-label">Page Title</label>
                <input type="text" required class="form-control" id="pageTitle" asp-for="PageTitle">
                <span class="text-danger" asp-validation-for="PageTitle"></span>
            </div>

            <div class="mb-3">
                <label for="content" class="form-label">Content</label>
                <textarea class="form-control" required id="content" asp-for="Content"></textarea>
                <span class="text-danger" asp-validation-for="Content"></span>
            </div>

            <div class="mb-3">
                <label for="shortDescription" class="form-label">Short Description</label>
                <input type="text" required class="form-control" id="shortDescription" asp-for="ShortDescription">
                <span class="text-danger" asp-validation-for="ShortDescription"></span>
            </div>

            <div class="mb-3">
                <label asp-for="FeaturedImage" class="form-label">Featured Image Upload</label>
                <input type="file" id="featuredImageUpload" name="FeaturedImage" asp-for="FeaturedImageUrl">
                <img src="@Model.FeaturedImageUrl" id="featuredImageDisplay" style="width:300px" />
            </div>

            <div class="mb-3">
                <label for="featuredImageUrl" class="form-label">Featured Image Url</label>
                <input type="text" required class="form-control" id="featuredImageUrl" asp-for="FeaturedImageUrl">
                <span class="text-danger" asp-validation-for="FeaturedImageUrl"></span>
            </div>

            <div class="mb-3">
                <label for="urlHandle" class="form-label">Url Handle</label>
                <input type="text" required class="form-control" id="urlHandle" asp-for="UrlHandle">
                <span class="text-danger" asp-validation-for="UrlHandle"></span>
            </div>

            <div class="mb-3">
                <label for="publishedDate" class="form-label">Published Date</label>
                <input type="date" required class="form-control" id="publishedDate" asp-for="PublishedDate">
                <span class="text-danger" asp-validation-for="PublishedDate"></span>
            </div>

            <div class="d-flex justify-content-center mb-3">
                <div class="btn-group" role="group" aria-label="Type Filter">
                    <button type="button" class="btn btn-primary" id="selectTouristObject">Tourist Object</button>
                    <button type="button" class="btn btn-primary" id="selectRoute">Route</button>
                </div>
            </div>

            <div id="touristObjectSection" style="display: none;">
                <div class="mb-3">
                    <label for="touristObject" class="form-label">Tourist Object</label>
                    <select class="form-select" id="touristObject" name="TouristObjectId" asp-items="@(new SelectList(ViewBag.TouristObjects, "Id", "Name", Model.TouristObjectId))">
                        <option value="">Select a Tourist Object</option>
                    </select>
                    <span class="text-danger" asp-validation-for="TouristObject"></span>
                </div>
            </div>

            <div id="tripRouteSection" style="display: none;">
                <div class="mb-3">
                    <label for="tripRoute" class="form-label">Route</label>
                    <select class="form-select" id="tripRoute" name="TripRouteId" asp-items="@(new SelectList(ViewBag.TripRoutes, "Id", "Name", Model.TripRouteId))">
                        <option value="">Select a Route</option>
                    </select>
                    <span class="text-danger" asp-validation-for="TripRoute"></span>
                </div>
            </div>

            <div id="touristObjectDetails" style="display: none;">
                <h4>Tourist Object Details</h4>
                <div class="mb-3">
                    <label for="address" class="form-label">Address</label>
                    <input type="text" class="form-control" id="address" readonly>
                </div>
                <div class="mb-3">
                    <label for="latitude" class="form-label">Latitude</label>
                    <input type="text" class="form-control" id="latitude" readonly>
                </div>
                <div class="mb-3">
                    <label for="longitude" class="form-label">Longitude</label>
                    <input type="text" class="form-control" id="longitude" readonly>
                </div>
                <div class="mb-3">
                    <label for="openingTime" class="form-label">Opening Time</label>
                    <input type="text" class="form-control" id="openingTime" readonly>
                </div>
                <div class="mb-3">
                    <label for="closingTime" class="form-label">Closing Time</label>
                    <input type="text" class="form-control" id="closingTime" readonly>
                </div>
            </div>

            <div id="routeDetails" style="display: none;">
                <h4>Route Tourist Objects</h4>
                <div id="routeTouristObjects"></div>
            </div>

            <div class="mb-3">
                <label for="tags" class="form-label">Tags (comma separated)</label>
                <input type="text" id="tags" class="form-control" asp-for="Tags" value="@string.Join(", ", @Model.Tags.Select(t => t.Name))" />
                <span id="tagError" class="text-danger" style="display:none;"></span>
                <span class="text-danger" asp-validation-for="Tags"></span>
            </div>

            <div class="mb-3">
                <button class="btn btn-primary" type="submit" id="submitButton">Submit</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const selectTouristObjectBtn = document.getElementById('selectTouristObject');
            const selectRouteBtn = document.getElementById('selectRoute');
            const touristObjectSection = document.getElementById('touristObjectSection');
            const tripRouteSection = document.getElementById('tripRouteSection');
            const touristObjectSelect = document.getElementById('touristObject');
            const touristObjectDetails = document.getElementById('touristObjectDetails');
            const tripRouteSelect = document.getElementById('tripRoute');
            const routeTouristObjects = document.getElementById('routeTouristObjects');
            const routeDetails = document.getElementById('routeDetails');

            function clearTouristObjectFields() {
                document.getElementById('address').value = '';
                document.getElementById('latitude').value = '';
                document.getElementById('longitude').value = '';
                document.getElementById('openingTime').value = '';
                document.getElementById('closingTime').value = '';
                touristObjectSelect.selectedIndex = 0;
                touristObjectDetails.style.display = 'none';
            }

            function clearRouteFields() {
                tripRouteSelect.selectedIndex = 0;
                routeTouristObjects.innerHTML = '';
                routeDetails.style.display = 'none';
            }

            function initializePage() {
                const selectedObjectId = touristObjectSelect.value;
                const selectedRouteId = tripRouteSelect.value;

                if (selectedObjectId) {
                    touristObjectSection.style.display = 'block';
                    tripRouteSection.style.display = 'none';
                    selectTouristObjectBtn.classList.add('active');
                    selectRouteBtn.classList.remove('active');
                    fetchTouristObjectData(selectedObjectId);
                } else if (selectedRouteId) {
                    touristObjectSection.style.display = 'none';
                    tripRouteSection.style.display = 'block';
                    selectRouteBtn.classList.add('active');
                    selectTouristObjectBtn.classList.remove('active');
                    fetchRouteData(selectedRouteId);
                }
            }

            function fetchTouristObjectData(objectId) {
                fetch(`/api/touristObject/${objectId}`)
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('address').value = data.address || '';
                        document.getElementById('latitude').value = data.latitude || '';
                        document.getElementById('longitude').value = data.longitude || '';
                        document.getElementById('openingTime').value = data.openingTime || '';
                        document.getElementById('closingTime').value = data.closingTime || '';
                        touristObjectDetails.style.display = 'block';
                    })
                    .catch(error => {
                        console.error('Error fetching tourist object data:', error);
                        touristObjectDetails.style.display = 'none';
                    });
            }

            function fetchRouteData(routeId) {
                fetch(`/api/blogpost/route/${routeId}`)
                    .then(response => response.json())
                    .then(data => {
                        routeTouristObjects.innerHTML = '';
                        if (data.touristObjects && Array.isArray(data.touristObjects)) {
                            data.touristObjects.forEach((obj, index) => {
                                const div = document.createElement('div');
                                div.classList.add('mb-3');
                                div.innerHTML = `
                                    <label class="form-label">Tourist Object ${index + 1}</label>
                                    <input type="text" class="form-control" value="${obj.name}" readonly>
                                `;
                                routeTouristObjects.appendChild(div);
                            });
                        } else {
                            routeTouristObjects.innerHTML = '<p>No tourist objects found for this route.</p>';
                        }
                        routeDetails.style.display = 'block';
                    })
                    .catch(error => {
                        console.error('Error fetching route data:', error);
                        routeTouristObjects.innerHTML = '<p>Error loading tourist objects.</p>';
                        routeDetails.style.display = 'none';
                    });
            }

            initializePage();

            selectTouristObjectBtn.addEventListener('click', function () {
                touristObjectSection.style.display = 'block';
                tripRouteSection.style.display = 'none';
                clearRouteFields();
                selectTouristObjectBtn.classList.add('active');
                selectRouteBtn.classList.remove('active');
            });

            selectRouteBtn.addEventListener('click', function () {
                touristObjectSection.style.display = 'none';
                tripRouteSection.style.display = 'block';
                clearTouristObjectFields();
                selectRouteBtn.classList.add('active');
                selectTouristObjectBtn.classList.remove('active');
            });

            touristObjectSelect.addEventListener('change', function () {
                const selectedObjectId = touristObjectSelect.value;
                if (selectedObjectId) {
                    fetchTouristObjectData(selectedObjectId);
                } else {
                    clearTouristObjectFields();
                }
            });

            tripRouteSelect.addEventListener('change', function () {
                const selectedRouteId = tripRouteSelect.value;
                if (selectedRouteId) {
                    fetchRouteData(selectedRouteId);
                } else {
                    clearRouteFields();
                }
            });

            var editor = new FroalaEditor('#content');

            const featuredImageUploadElement = document.getElementById('featuredImageUpload');
            const featuredImageUrl = document.getElementById('featuredImageUrl');
            const featuredImageDisplay = document.getElementById('featuredImageDisplay');

            async function uploadFeaturedImage(e) {
                console.log(e.target.files[0]);

                let data = new FormData();
                data.append('file', e.target.files[0]);

                await fetch('/api/image', {
                    method: 'POST',
                    headers: {
                        'Accept': '*/*',
                    },
                    body: data
                }).then(response => response.json())
                    .then(result => {
                        featuredImageUrl.value = result.link;
                        featuredImageDisplay.style.display = 'block';
                        featuredImageDisplay.src = result.link;
                    });
            }

            featuredImageUploadElement.addEventListener('change', uploadFeaturedImage);
        });

        document.getElementById('tags').addEventListener('input', function (event) {
            const maxLength = 16;
            const tags = event.target.value.split(',');
            const errorElement = document.getElementById('tagError');
            const submitButton = document.getElementById('submitButton');
            const invalidTags = tags.filter(tag => tag.trim().length > maxLength);

            if (invalidTags.length > 0) {
                errorElement.style.display = 'block';
                errorElement.textContent = `Tags must be 16 characters or less. Invalid tags: ${invalidTags.join(', ')}`;
                submitButton.disabled = true;
            } else {
                errorElement.style.display = 'none';
                submitButton.disabled = false;
            }
        });
    </script>
}